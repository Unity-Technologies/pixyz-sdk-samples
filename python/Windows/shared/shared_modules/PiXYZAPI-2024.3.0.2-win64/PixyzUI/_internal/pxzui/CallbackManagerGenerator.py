
def generate_callback_manager(pxz, path):
    print("Generating CallbackManager.py at " + path + " ...")

    # read events from api
    events = [event for module in pxz.core.getModules() for group in pxz.core.getGroups(module.name) for event in pxz.core.getEvents(module.name, group.name)]

    # helper method to put first letter in lower case
    fllc = lambda s: s[:1].lower() + s[1:] if s else ''

    with open(path, 'w') as f:
        f.write("# !---------- THIS FILE IS AUTOMATICALLY GENERATED! SEE CallbackManagerGenerator.py FOR GENERATION DETAILS. ----------!\n\n")
        f.write("import pxz\n\n")
        f.write("class CallbackManager:\n")
        f.write("    def __init__(self):\n")
        f.write("        self._callbacks = {}\n\n")
        # Generate event callbacks
        for event in events:
            parameter_names = [p.name for p in event.parameters]
            f.write("        self._" + fllc(event.name) + "Callback = lambda " + ", ".join(parameter_names) + ": self._on" + event.name + "(" + ", ".join(parameter_names) + ")\n")
            f.write("        self.__" + fllc(event.name) + "CallbackId = pxz." + event.module.lower() + ".add" + event.name + "Callback(self._" + fllc(event.name) + "Callback, None)\n\n")

        # Generate del method to clean up
        f.write("    def __del__(self):\n")
        for event in events:
            f.write("        pxz." + event.module.lower() + ".remove" + event.name + "Callback(self.__" + fllc(event.name) + "CallbackId)\n")

        # Generate add callback method
        f.write("\n")
        f.write("#region add callbacks\n")
        for event in events:
            parameter_names = [p.name for p in event.parameters]
            f.write("    def add" + event.name + "Callback(self, callback):\n")
            f.write("        \"\"\"Add callback to manager.")
            if parameter_names:
                f.write(" Expected parameters: [" + ", ".join(parameter_names) + "]")
            f.write("\"\"\"\n")
            f.write("        if '" + event.name + "' not in self._callbacks:\n")
            f.write("            self._callbacks['" + event.name + "'] = []\n")
            f.write("        self._callbacks['" + event.name + "'].append(callback)\n\n")
        f.write("#endregion\n\n")

        # generate remove callback method
        f.write("#region remove callbacks\n")
        for event in events:
            f.write("    def remove" + event.name + "Callback(self, callback):\n")
            f.write("        \"\"\"Remove callback that has been added via add" + event.name + "Callback.\"\"\"\n")
            f.write("        if '" + event.name + "' in self._callbacks:\n")
            f.write("            if callback in self._callbacks['" + event.name + "']:\n")
            f.write("                self._callbacks['" + event.name + "'].remove(callback)\n")
            f.write("                return\n")
            f.write("        raise ValueError(\"Trying to remove " + event.name + "Callback that has not been registered!\\nCallback = \" + str(callback) + \"\\n\")\n\n")
        f.write("#endregion\n\n")

        # Generate event callback methods
        f.write("#region event callbacks\n")
        for event in events:
            parameter_names = [p.name for p in event.parameters]
            f.write("    def _on" + event.name + "(self, " + ", ".join(parameter_names) + "):\n")
            f.write("        if '" + event.name + "' not in self._callbacks:\n")
            f.write("            return\n")
            f.write("        for callback in self._callbacks['" + event.name + "']:\n")
            f.write("            callback(" + ", ".join(parameter_names) + ")\n\n")
        f.write("#endregion\n")

        # add helper function for bound/unbound function execution
        f.write("\n")
        f.write("    def _executeCallback(self, callback):\n")
        f.write("        if hasattr(callback, '__self__'):\n")
        f.write("            callback()\n")
        f.write("        else:\n")
        f.write("            callback(self)\n\n")
    print("Generating CallbackManager finished")
